.. role:: raw-html(raw)
   :format: html

.. |mod2doctest|    replace:: :mod:`mod2doctest`
.. |doctest|  		replace:: :mod:`doctest`

mod2doctest
***********

Important Updates
=================

  *  9/23/2010 -- Version 0.2.0 out.  Drastically changes how |mod2doctest| operates and 
     fixes many bugs (mainly due to whitespace errors).  Much better, more
     stable release. 

What is mod2doctest?
====================

With |mod2doctest| you can set up a test the "quick and dirty" way -- just by
making a module that tests your code, running it, and then inspecting the 
output.  Then, you can use |mod2doctest| to take a snapshot of the output and 
convert it to a permanent test fixture -- a :mod:`doctest` testable docstring.  
This docstring is now something that you can add to a test suite or can be 
picked up by module like :mod:`nose`.  In a nut shell, |mod2doctest| saves you 
from copying and pasting output into "doctest-able" docstrings. 

But it also makes it easy to format the output docstring.  By using special
``#>`` and ``#|`` comments, it easy to put sphinx rest style documentation 
right in your python module.  The goal is to turn your "quick and dirty get
up and running script" into 1. a permanent doctest test fixture and 2. sphinx
compatiable documentation of your program. 


Quick Example
================================================================================

A module that looks like this::

	if __name__ == '__main__':
	
	    # All __name__ == '__main__' blocks are removed, serving as mod2doctest 
	    # comments
	    
	    import mod2doctest
	    mod2doctest.convert('python', src=True, target='_doctest', run_doctest=False, 
	                        add_testmod=False, add_autogen=False)    
	
	#>Welcome to mod2doctest
	#>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	#|
	#|Just enter in some python
	#| 
	#|.. warning::  
	#|   make sure to examine your resulting docstr to make sure output is as 
	#|   expected!
	
	#|The basics: 
	print 'Hello World!'
	
	#>Extended Example
	#>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	#|A little more:
	somelist = [100, 2, -20, 340, 0, 0, 10, 10, 88, -3, 100, 2, -99, -1]
	sorted(set(somelist))

Will print to stdout (when run) like this::
	
	Python 2.6.2 (r262:71605, Apr 14 2009, 22:40:02) [MSC v.1500 32 bit (Intel)] on win32
	Type "help", "copyright", "credits" or "license" for more information.
	
	
	Welcome to mod2doctest
	++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	Hello World!
	
	
	Extended Example
	++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	[-99, -20, -3, -1, 0, 2, 10, 88, 100, 340]

Also, a docstring like this is created::

	r"""
	Welcome to mod2doctest
	++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	Just enter in some python
	 
	.. warning::  
	  make sure to examine your resulting docstr to make sure output is as 
	  expected!
	
	The basics: 
	 
	>>> print 'Hello World!'
	Hello World!
	
	Extended Example
	++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	A little more:
	 
	>>> somelist = [100, 2, -20, 340, 0, 0, 10, 10, 88, -3, 100, 2, -99, -1]
	>>> sorted(set(somelist))
	[-99, -20, -3, -1, 0, 2, 10, 88, 100, 340]
	
	"""


Which, when included in sphinx documentation looks like this:

.. automodule:: tests.intro_doctest


Installation for Python 2.4 through 2.6
=======================================

Try::

	easy_install mod2doctest
	
	or 
	
	pip mod2doctest

If that does not work go to http://pypi.python.org/pypi/mod2doctest/.

There you can grab the windows installer, egg, or source directly. 

Also, go to http://github.com/cart0113/mod2doctest to grab the latest repo.


A Word Of Warning
=================

Here's the warning: **make sure to carefully inspect the output docstring or
final sphinx webpage generated by mod2doctest**. 

|mod2doctest| basically provides a 'snapshot' of the current module run.  
Since it automatically copies the output to the docstring, it can be easy to 
skip the step of actually checking the output and have wrong output in the 
docstring.  That is, just because the test ran does not mean it is what you 
really want. 

To be a useful test fixture that can be used for, say regression testing you
need to make sure the 'snapshot' contains the intended results. 


Just One More Thing: Running Your Test. 
=======================================

Just a quick note -- :mod:`mod2doctest` can run your script up to two times
if the ``run_doctest`` parameter is set to ``True``. 

For the example script::

	if __name__ == '__main__':
		import mod2doctest
		mod2doctest.convert(src=True, target='_doctest', run_doctest=True)
	
	print 'Foobar'   

will be execute two times: once when the script is piped to a shell and once
by doctest itself (to check if the doctest does in fact pass)

The script::

	if __name__ == '__main__':
		import mod2doctest
		mod2doctest.convert(src=True, target='_doctest', run_doctest=False)
	
	print 'Foobar'   

will run only once (this one is not run in doctest).

will run once -- just when the module code is piped to the shell.    

.. note:: 

   You may notice this if you have sleep / delay / blocking in your test and 
   your test is slow to run.   If you run mod2doctest like the first example it 
   takes two times longer to run than you might have been expecting.  


API
===

.. automodule:: mod2doctest
.. autofunction:: mod2doctest.convert


Example
=====

One great thing about |doctest| is that your tests can easily be converted
to webpages using :mod:`sphinx`.  Even for large test programs the linear 
webpage output is a really great tool to understand the test setup and overall
test structure (which is a great reason to use |doctest| over :mod:`unittest`
even for large programs). 

By using the comment stripping feature and the :class:`m2d_print` utility
functions, |mod2doctest| can convert those `quick and dirty` scripts you threw 
together to test your module into usable documentation.  

The following tests below were generated using these techniques. 

.. note::

   In this case, to best understand what's going on, look in mod2doctest.tests 
   package.  And, if you want, go to 
   http://github.com/cart0113/mod2doctest, clone the repo, and
   check out how those modules and how they are used in the Sphinx 
   documentation. 

.. toctree::
   :maxdepth: 1
	
   basicexample
   extendedexample


How Does |mod2doctest| Work?
============================

Basically, |mod2doctest| takes your input, pipes it to an interpreter using the
:mod:`subprocess` module.  Then, a bunch of text processing is done to line
up the original module text with the output from subprocess (this includes
lining up the '>>> ' and '...' which is tricker than it sounds).  

This is why the output from mod2doctest is much more nicely formatted than if 
you were to just paste a module into the intrepreter yourself (also, that often 
does not work due to allowed whitespace differences between modules and the 
interactive interpreter). 

Indices and Tables
==================
* :ref:`genindex`
* :ref:`search`
